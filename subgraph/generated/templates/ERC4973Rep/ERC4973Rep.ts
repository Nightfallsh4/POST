// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalGranted extends ethereum.Event {
  get params(): ApprovalGranted__Params {
    return new ApprovalGranted__Params(this);
  }
}

export class ApprovalGranted__Params {
  _event: ApprovalGranted;

  constructor(event: ApprovalGranted) {
    this._event = event;
  }

  get approvedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReputationChange extends ethereum.Event {
  get params(): ReputationChange__Params {
    return new ReputationChange__Params(this);
  }
}

export class ReputationChange__Params {
  _event: ReputationChange;

  constructor(event: ReputationChange) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReputation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Revoked extends ethereum.Event {
  get params(): Revoked__Params {
    return new Revoked__Params(this);
  }
}

export class Revoked__Params {
  _event: Revoked;

  constructor(event: Revoked) {
    this._event = event;
  }

  get revokedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC4973Rep__getApprovedListResultValue0Struct extends ethereum.Tuple {
  get expiryBlock(): BigInt {
    return this[0].toBigInt();
  }

  get exists(): boolean {
    return this[1].toBoolean();
  }
}

export class ERC4973Rep extends ethereum.SmartContract {
  static bind(address: Address): ERC4973Rep {
    return new ERC4973Rep("ERC4973Rep", address);
  }

  addIncrement(): BigInt {
    let result = super.call("addIncrement", "addIncrement():(uint256)", []);

    return result[0].toBigInt();
  }

  try_addIncrement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addIncrement", "addIncrement():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApprovedList(
    userAddress: Address
  ): ERC4973Rep__getApprovedListResultValue0Struct {
    let result = super.call(
      "getApprovedList",
      "getApprovedList(address):((uint256,bool))",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return changetype<ERC4973Rep__getApprovedListResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getApprovedList(
    userAddress: Address
  ): ethereum.CallResult<ERC4973Rep__getApprovedListResultValue0Struct> {
    let result = super.tryCall(
      "getApprovedList",
      "getApprovedList(address):((uint256,bool))",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC4973Rep__getApprovedListResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getReputation(userAddress: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "getReputation",
      "getReputation(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReputation(
    userAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReputation",
      "getReputation(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  give(param0: Address, param1: string, param2: Bytes): BigInt {
    let result = super.call("give", "give(address,string,bytes):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromString(param1),
      ethereum.Value.fromBytes(param2)
    ]);

    return result[0].toBigInt();
  }

  try_give(
    param0: Address,
    param1: string,
    param2: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("give", "give(address,string,bytes):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromString(param1),
      ethereum.Value.fromBytes(param2)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuer(): Address {
    let result = super.call("issuer", "issuer():(address)", []);

    return result[0].toAddress();
  }

  try_issuer(): ethereum.CallResult<Address> {
    let result = super.tryCall("issuer", "issuer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintLimit(): BigInt {
    let result = super.call("mintLimit", "mintLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintLimit", "mintLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reduceIncrement(): BigInt {
    let result = super.call(
      "reduceIncrement",
      "reduceIncrement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reduceIncrement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reduceIncrement",
      "reduceIncrement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  root(): Bytes {
    let result = super.call("root", "root():(bytes32)", []);

    return result[0].toBytes();
  }

  try_root(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("root", "root():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  take(from: Address, uri: string, signature: Bytes): BigInt {
    let result = super.call("take", "take(address,string,bytes):(uint256)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromString(uri),
      ethereum.Value.fromBytes(signature)
    ]);

    return result[0].toBigInt();
  }

  try_take(
    from: Address,
    uri: string,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("take", "take(address,string,bytes):(uint256)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromString(uri),
      ethereum.Value.fromBytes(signature)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenId(): BigInt {
    let result = super.call("tokenId", "tokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenId", "tokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(): string {
    let result = super.call("uri", "uri():(string)", []);

    return result[0].toString();
  }

  try_uri(): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get version(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _root(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _mintLimit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get initialTokenId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _addIncrement(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _reduceIncrement(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get addressToApprove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expiryBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DecreaseReputationCall extends ethereum.Call {
  get inputs(): DecreaseReputationCall__Inputs {
    return new DecreaseReputationCall__Inputs(this);
  }

  get outputs(): DecreaseReputationCall__Outputs {
    return new DecreaseReputationCall__Outputs(this);
  }
}

export class DecreaseReputationCall__Inputs {
  _call: DecreaseReputationCall;

  constructor(call: DecreaseReputationCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseReputationCall__Outputs {
  _call: DecreaseReputationCall;

  constructor(call: DecreaseReputationCall) {
    this._call = call;
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): string {
    return this._call.inputValues[1].value.toString();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseReputationCall extends ethereum.Call {
  get inputs(): IncreaseReputationCall__Inputs {
    return new IncreaseReputationCall__Inputs(this);
  }

  get outputs(): IncreaseReputationCall__Outputs {
    return new IncreaseReputationCall__Outputs(this);
  }
}

export class IncreaseReputationCall__Inputs {
  _call: IncreaseReputationCall;

  constructor(call: IncreaseReputationCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseReputationCall__Outputs {
  _call: IncreaseReputationCall;

  constructor(call: IncreaseReputationCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get addressToRevoke(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class TakeCall extends ethereum.Call {
  get inputs(): TakeCall__Inputs {
    return new TakeCall__Inputs(this);
  }

  get outputs(): TakeCall__Outputs {
    return new TakeCall__Outputs(this);
  }
}

export class TakeCall__Inputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TakeCall__Outputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnequipCall extends ethereum.Call {
  get inputs(): UnequipCall__Inputs {
    return new UnequipCall__Inputs(this);
  }

  get outputs(): UnequipCall__Outputs {
    return new UnequipCall__Outputs(this);
  }
}

export class UnequipCall__Inputs {
  _call: UnequipCall;

  constructor(call: UnequipCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnequipCall__Outputs {
  _call: UnequipCall;

  constructor(call: UnequipCall) {
    this._call = call;
  }
}
