{
  "language": "Solidity",
  "sources": {
    "contracts/PostFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"./Interfaces/ISoulboundFactory.sol\";\nimport \"./Interfaces/IERC4973RepFactory.sol\";\nimport \"./Interfaces/IERC4973AttestFactory.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PostFactory is Ownable {\n\n\n\tstring public creator;\n\tuint256 public mintFee;\n\taddress public soulboundFactoryAddress;\n\taddress public erc4973RepFactoryAddress;\n\taddress public erc4973AttestFactoryAddress;\n\n\t// Events\n\tevent DropCreated(\n\t\tstring dropType,\n\t\taddress dropAddress\n\t);\n\n\tconstructor(string memory _creator, uint256 _mintFee) {\n\t\tcreator = _creator;\n\t\tmintFee = _mintFee;\n\t}\n\n\tfunction createSoulboundToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tISoulboundFactory soulboundFactory = ISoulboundFactory(\n\t\t\tsoulboundFactoryAddress\n\t\t);\n\t\taddress dropAddress = soulboundFactory.createDrop(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\temit DropCreated(\"Soulbound\",dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction createSoulboundReputationToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tIERC4973RepFactory erc4973RepFactory = IERC4973RepFactory(\n\t\t\terc4973RepFactoryAddress\n\t\t);\n\t\taddress dropAddress = erc4973RepFactory.createDrop(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId,\n\t\t\t_addIncrement,\n\t\t\t_reduceIncrement\n\t\t);\n\t\temit DropCreated(\"ERC4973Rep\",dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction createSoulboundAttestationToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tIERC4973AttestFactory erc4973AttestFactory = IERC4973AttestFactory(\n\t\t\terc4973AttestFactoryAddress\n\t\t);\n\n\t\taddress dropAddress = erc4973AttestFactory.createDeploy(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\temit DropCreated(\"ERC4973Attest\", dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction setMintFee(uint _mintFee) external onlyOwner() {\n\t\tmintFee = _mintFee;\n\t}\n\n    function setAddresses(address[3] memory addressList) external onlyOwner() {\n        soulboundFactoryAddress = addressList[0];\n        erc4973RepFactoryAddress = addressList[1];\n        erc4973AttestFactoryAddress = addressList[2];\n    }\n\n\tfunction withdrawFees() external onlyOwner() {\n\t\t(bool sent, ) = payable(owner()).call{ value: address(this).balance }(\"\");\n\t\trequire(sent, \"Error occured while transfer\");\n\t}\n}\n"
    },
    "contracts/Interfaces/ISoulboundFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ISoulboundFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    },
    "contracts/Interfaces/IERC4973RepFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IERC4973RepFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    },
    "contracts/Interfaces/IERC4973AttestFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IERC4973AttestFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDeploy(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}