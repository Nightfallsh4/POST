{
  "language": "Solidity",
  "sources": {
    "contracts/ERC4973Attest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"./Soulbound.sol\";\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\ncontract ERC4973Attest is Soulbound {\n\t// State Variables\n\n\tmapping(address => mapping(uint256 => address)) private tokenToAttester;\n\tmapping(address => mapping(uint256 => address[])) private tokenToAttestation;\n\n\t// Modifiers\n\tmodifier isOwner(uint256 _tokenId) {\n\t\trequire(ownerOf(_tokenId) == msg.sender, \"Only owner can request attest\");\n\t\t_;\n\t}\n\n\t// Events\n\tevent AttestationRequest(\n\t\taddress indexed attestee,\n\t\taddress indexed attester,\n\t\tuint256 indexed _tokenId\n\t);\n\tevent AttestationFulfilled(\n\t\taddress indexed attestee,\n\t\taddress indexed attester,\n\t\tuint256 indexed _tokenId\n\t);\n\tevent RequestDeleted(address indexed attestee, uint256 indexed _tokenId);\n\n\t// constructor Functions\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t)\n\t\tSoulbound(_name, _symbol, version, _uri, _root, _mintLimit, initialTokenId)\n\t{}\n\n\t// External Function\n\t// function mint() external {\n\t// \t_mint(address(0), msg.sender, tokenId, uri);\n\t// \ttokenId += 1;\n\t// }\n\n\tfunction requestAttestation(address attesterAddress, uint256 _tokenId)\n\t\texternal\n\t\tisOwner(_tokenId)\n\t{\n\t\ttokenToAttester[msg.sender][_tokenId] = attesterAddress;\n\t\temit AttestationRequest(msg.sender, attesterAddress, _tokenId);\n\t}\n\n\tfunction approveAttestation(address attesteeAddress, uint256 _tokenId)\n\t\texternal\n\t{\n\t\trequire(\n\t\t\ttokenToAttester[attesteeAddress][_tokenId] == msg.sender,\n\t\t\t\"Only requested Address can attest\"\n\t\t);\n\t\ttokenToAttestation[attesteeAddress][_tokenId].push(msg.sender);\n\t\temit AttestationFulfilled(attesteeAddress, msg.sender, _tokenId);\n\t}\n\n\tfunction deleteRequest(uint256 _tokenId) external isOwner(_tokenId) {\n\t\tdelete tokenToAttester[msg.sender][_tokenId];\n\t\temit RequestDeleted(msg.sender, _tokenId);\n\t}\n\n\t// Getter Functions\n\n\tfunction getTokenToAttester(address userAddress, uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\treturns (address)\n\t{\n\t\treturn tokenToAttester[userAddress][_tokenId];\n\t}\n\n\tfunction getTokenToAttestation(address userAddress, uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\treturns (address[] memory)\n\t{\n\t\treturn tokenToAttestation[userAddress][_tokenId];\n\t}\n}\n"
    },
    "contracts/Soulbound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"erc4973/src/ERC4973.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nerror TransfersNotSupportedYet();\n\ncontract Soulbound is ERC4973 {\n\t// State Varaibles\n\tstring public uri;\n\tuint256 public tokenId;\n\tbytes32 public root;\n\tuint256 public mintLimit;\n\tmapping(address => uint) private tokenPerAddress;\n\t// Constructor Function\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) ERC4973(_name, _symbol, version) {\n\t\turi = _uri;\n\t\troot = _root;\n\t\tmintLimit = _mintLimit;\n\t\ttokenId = initialTokenId;\n\t}\n\n\t// External Functions\n\tfunction mint(bytes32[] memory proof) external {\n\t\trequire(isValid(proof), \"Not Valid proof for Address\");\n\t\trequire(tokenPerAddress[msg.sender]<mintLimit, \"Token Limit Reached\");\n\t\ttokenPerAddress[msg.sender] += 1;\n\t\ttokenId += 1;\n\t\t_mint(address(0), msg.sender, tokenId, uri);\n\t}\n\n\n\tfunction give(\n\t\taddress, /*to*/\n\t\tstring calldata, /*uri*/\n\t\tbytes calldata /*signature*/\n\t) external override returns (uint256) {\n\t\t// require(msg.sender != to, \"give: cannot give from self\");\n\t\t// uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);\n\t\t// _mint(msg.sender, to, tokenId, uri);\n\t\t// _usedHashes.set(tokenId);\n\t\t// return tokenId;\n\t\trevert TransfersNotSupportedYet();\n\t}\n\n\n\tfunction isValid(bytes32[] memory proof) internal view returns (bool){\n\t\treturn MerkleProof.verify(proof, root, keccak256(abi.encodePacked(msg.sender)));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "erc4973/src/ERC4973.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.8;\n\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\nimport {ERC165} from \"./ERC165.sol\";\n\nimport {IERC721Metadata} from \"./interfaces/IERC721Metadata.sol\";\nimport {IERC4973} from \"./interfaces/IERC4973.sol\";\n\nbytes32 constant AGREEMENT_HASH =\n  keccak256(\n    \"Agreement(address active,address passive,string tokenURI)\"\n);\n\n/// @notice Reference implementation of EIP-4973 tokens.\n/// @author Tim Daubenschütz, Rahul Rumalla (https://github.com/rugpullindex/ERC4973/blob/master/src/ERC4973.sol)\nabstract contract ERC4973 is EIP712, ERC165, IERC721Metadata, IERC4973 {\n  using BitMaps for BitMaps.BitMap;\n  BitMaps.BitMap private _usedHashes;\n\n  string private _name;\n  string private _symbol;\n\n  mapping(uint256 => address) private _owners;\n  mapping(uint256 => string) private _tokenURIs;\n  mapping(address => uint256) private _balances;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    string memory version\n  ) EIP712(name_, version) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      interfaceId == type(IERC4973).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    require(_exists(tokenId), \"tokenURI: token doesn't exist\");\n    return _tokenURIs[tokenId];\n  }\n\n  function unequip(uint256 tokenId) public virtual override {\n    require(msg.sender == ownerOf(tokenId), \"unequip: sender must be owner\");\n    _usedHashes.unset(tokenId);\n    _burn(tokenId);\n  }\n\n  function balanceOf(address owner) public view virtual override returns (uint256) {\n    require(owner != address(0), \"balanceOf: address zero is not a valid owner\");\n    return _balances[owner];\n  }\n\n\n  function ownerOf(uint256 tokenId) public view virtual returns (address) {\n    address owner = _owners[tokenId];\n    require(owner != address(0), \"ownerOf: token doesn't exist\");\n    return owner;\n  }\n\n  function give(\n    address to,\n    string calldata uri,\n    bytes calldata signature\n  ) external virtual returns (uint256) {\n    require(msg.sender != to, \"give: cannot give from self\");\n    uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);\n    _mint(msg.sender, to, tokenId, uri);\n    _usedHashes.set(tokenId);\n    return tokenId;\n  }\n\n  function take(\n    address from,\n    string calldata uri,\n    bytes calldata signature\n  ) external virtual returns (uint256) {\n    require(msg.sender != from, \"take: cannot take from self\");\n    uint256 tokenId = _safeCheckAgreement(msg.sender, from, uri, signature);\n    _mint(from, msg.sender, tokenId, uri);\n    _usedHashes.set(tokenId);\n    return tokenId;\n  }\n\n  function _safeCheckAgreement(\n    address active,\n    address passive,\n    string calldata uri,\n    bytes calldata signature\n  ) internal virtual returns (uint256) {\n    bytes32 hash = _getHash(active, passive, uri);\n    uint256 tokenId = uint256(hash);\n\n    require(\n      SignatureChecker.isValidSignatureNow(passive, hash, signature),\n      \"_safeCheckAgreement: invalid signature\"\n    );\n    require(!_usedHashes.get(tokenId), \"_safeCheckAgreement: already used\");\n    return tokenId;\n  }\n\n  function _getHash(\n    address active,\n    address passive,\n    string calldata uri\n  ) internal view returns (bytes32) {\n    bytes32 structHash = keccak256(\n      abi.encode(\n        AGREEMENT_HASH,\n        active,\n        passive,\n        keccak256(bytes(uri))\n      )\n    );\n    return _hashTypedDataV4(structHash);\n  }\n\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _owners[tokenId] != address(0);\n  }\n\n  function _mint(\n    address from,\n    address to,\n    uint256 tokenId,\n    string memory uri\n  ) internal virtual returns (uint256) {\n    require(!_exists(tokenId), \"mint: tokenID exists\");\n    _balances[to] += 1;\n    _owners[tokenId] = to;\n    _tokenURIs[tokenId] = uri;\n    emit Transfer(from, to, tokenId);\n    return tokenId;\n  }\n\n  function _burn(uint256 tokenId) internal virtual {\n    address owner = ownerOf(tokenId);\n\n    _balances[owner] -= 1;\n    delete _owners[tokenId];\n    delete _tokenURIs[tokenId];\n\n    emit Transfer(owner, address(0), tokenId);\n  }\n}\n"
    },
    "erc4973/src/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n      return interfaceId == type(IERC165).interfaceId;\n  }\n}\n"
    },
    "erc4973/src/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.6;\n\ninterface IERC721Metadata {\n  function name() external view returns (string memory);\n  function symbol() external view returns (string memory);\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "erc4973/src/interfaces/IERC4973.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.6;\n\n/// @title Account-bound tokens\n/// @dev See https://eips.ethereum.org/EIPS/eip-4973\n/// Note: the ERC-165 identifier for this interface is 0x5164cf47\ninterface IERC4973 {\n  /// @dev This emits when ownership of any ABT changes by any mechanism.\n  ///  This event emits when ABTs are given or equipped and unequipped\n  ///  (`to` == 0).\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  /// @notice Count all ABTs assigned to an owner\n  /// @dev ABTs assigned to the zero address are considered invalid, and this\n  ///  function throws for queries about the zero address.\n  /// @param owner An address for whom to query the balance\n  /// @return The number of ABTs owned by `address owner`, possibly zero\n  function balanceOf(address owner) external view returns (uint256);\n  /// @notice Find the address bound to an ERC4973 account-bound token\n  /// @dev ABTs assigned to zero address are considered invalid, and queries\n  ///  about them do throw.\n  /// @param tokenId The identifier for an ABT.\n  /// @return The address of the owner bound to the ABT.\n  function ownerOf(uint256 tokenId) external view returns (address);\n  /// @notice Removes the `uint256 tokenId` from an account. At any time, an\n  ///  ABT receiver must be able to disassociate themselves from an ABT\n  ///  publicly through calling this function. After successfully executing this\n  ///  function, given the parameters for calling `function give` or\n  ///  `function take` a token must be re-equipable.\n  /// @dev Must emit a `event Transfer` with the `address to` field pointing to\n  ///  the zero address.\n  /// @param tokenId The identifier for an ABT.\n  function unequip(uint256 tokenId) external;\n  /// @notice Creates and transfers the ownership of an ABT from the\n  ///  transaction's `msg.sender` to `address to`.\n  /// @dev Throws unless `bytes signature` represents an EIP-2089 Compact\n  ///  Signature of the EIP-712 structured data hash\n  ///  `Agreement(address active,address passive,string tokenURI)` expressing\n  ///  `address to`'s explicit agreement to be publicly associated with\n  ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\n  ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\n  ///  `uint256`. If `bytes signature` is empty or `address to` is a contract,\n  ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\n  ///  be made to `address to`. A successful execution must result in the\n  ///  `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an\n  ///  `uint256 tokenId` in the contract, `function give(...)` must throw.\n  /// @param to The receiver of the ABT.\n  /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\n  /// @param signature A EIP-2089-compatible Compact Signature of the EIP-712\n  ///  structured data hash\n  ///  `Agreement(address active,address passive,string tokenURI)` signed by\n  ///  `address to`.\n  /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\n  ///  EIP-712 structured data hash to a `uint256`.\n  function give(\n    address to,\n    string calldata uri,\n    bytes calldata signature\n  ) external returns (uint256);\n  /// @notice Creates and transfers the ownership of an ABT from an\n  /// `address from` to the transaction's `msg.sender`.\n  /// @dev Throws unless `bytes signature` represents an EIP-2089 Compact\n  ///  Signature of the EIP-712 structured data hash\n  ///  `Agreement(address active,address passive,string tokenURI)` expressing\n  ///  `address from`'s explicit agreement to be publicly associated with\n  ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\n  ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\n  ///  `uint256`. If `bytes signature` is empty or `address from` is a contract,\n  ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\n  ///  be made to `address from`. A successful execution must result in the\n  ///  emission of an `event Transfer(from, msg.sender, tokenId)`. Once an ABT\n  ///  exists as an `uint256 tokenId` in the contract, `function take(...)` must\n  ///  throw.\n  /// @param from The origin of the ABT.\n  /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\n  /// @param signature A EIP-2089-compatible Compact Signature of the EIP-712\n  ///  structured data hash\n  ///  `Agreement(address active,address passive,string tokenURI)` signed by\n  ///  `address from`.\n  /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\n  ///  EIP-712 structured data hash to a `uint256`.\n  function take(\n    address from,\n    string calldata uri,\n    bytes calldata signature\n  ) external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "erc4973/src/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/ERC4973AttestFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./ERC4973Attest.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ERC4973AttestFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {\n\t\tproxy = _proxy;\n\t}\n\n    function createDeploy(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n        require(msg.sender == proxy,\"Only Proxy Contract can call this\");\n\t\tERC4973Attest attestationToken = new ERC4973Attest(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\treturn address(attestationToken);\n\t}\n\n    function withdrawFees() external onlyOwner(){\n        (bool sent,) = payable(owner()).call{value: address(this).balance}(\"\");\n        require(sent,\"Error occured while transfer\");\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/SoulboundFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./Soulbound.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract SoulboundFactory is Ownable{\n    address public proxy;\n\n    constructor(address _proxy) {\n        proxy = _proxy;\n    }\n\n    function createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n        require(msg.sender == proxy,\"Only Proxy Contract can call this\");\n\t\tSoulbound soulbound = new Soulbound(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\treturn address(soulbound);\n\t}\n\n    function withdrawFees() external onlyOwner(){\n        (bool sent,) = payable(owner()).call{value: address(this).balance}(\"\");\n        require(sent,\"Error occured while transfer\");\n    }\n    \n}"
    },
    "contracts/ERC4973Rep.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"./Soulbound.sol\";\n\nerror NotAuthorised();\n\ncontract ERC4973Rep is Soulbound {\n\tstruct Approved {\n\t\tuint256 expiryBlock;\n\t\tbool exists;\n\t}\n\n    // State Variables\n\n\taddress public issuer;\n\tmapping(address => mapping(uint256 => uint256)) private reputation;\n\n\tuint256 public addIncrement;\n\tuint256 public reduceIncrement;\n\n\tmapping(address => Approved) private approvedList;\n\n\t// Events\n\tevent ReputationChange(\n\t\taddress indexed userAddress,\n\t\tuint256 indexed newReputation\n\t);\n\n\tevent ApprovalGranted(address indexed approvedAddress);\n\tevent Revoked(address indexed revokedAddress);\n\n\t// Modifiers\n\tmodifier isIssuerOrApproved() {\n\t\trequire(\n\t\t\t(approvedList[msg.sender].exists &&\n\t\t\t\tapprovedList[msg.sender].expiryBlock >= block.number) ||\n\t\t\t\tmsg.sender == issuer,\n\t\t\t\"Not Authorised or Expired\"\n\t\t);\n\t\t_;\n\t}\n\n\t// Contructor Function\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) Soulbound(_name, _symbol, version, _uri, _root, _mintLimit, initialTokenId) {\n\t\tissuer = msg.sender;\n\t\taddIncrement = _addIncrement;\n\t\treduceIncrement = _reduceIncrement;\n\t}\n\n\t// External Functions\n\t// function mint() external {\n\t// \t_mint(address(0), msg.sender, tokenId, uri);\n\t// \ttokenId += 1;\n\t// }\n\n\tfunction increaseReputation(address userAddress, uint256 _tokenId)\n\t\texternal\n\t\tisIssuerOrApproved\n\t{\n\t\trequire(ownerOf(_tokenId) == userAddress, \"Address doesn't have SBT\");\n\t\treputation[userAddress][_tokenId] += addIncrement;\n\t\temit ReputationChange(userAddress, reputation[userAddress][_tokenId]);\n\t}\n\n\tfunction decreaseReputation(address userAddress, uint256 _tokenId)\n\t\texternal\n\t\tisIssuerOrApproved\n\t{\n\t\trequire(ownerOf(_tokenId) == userAddress, \"Address doesn't have SBT\");\n\t\tif (reputation[userAddress][_tokenId] >= reduceIncrement) {\n\t\t\treputation[userAddress][_tokenId] -= reduceIncrement;\n\t\t}else {\n\t\t\treputation[userAddress][_tokenId] = 0;\n\t\t}\n\t\temit ReputationChange(userAddress, reputation[userAddress][_tokenId]);\n\t}\n\n\tfunction approve(address addressToApprove, uint256 expiryBlock) external {\n\t\trequire(msg.sender == issuer, \"Only issuer can Approve Addresses\");\n\t\tapprovedList[addressToApprove] = Approved(expiryBlock, true);\n\t\temit ApprovalGranted(addressToApprove);\n\t}\n\n\tfunction revoke(address addressToRevoke) external {\n\t\trequire(msg.sender == issuer, \"Only issuer can Revoke Addresses\");\n\t\tdelete approvedList[addressToRevoke];\n\t\temit Revoked(addressToRevoke);\n\t}\n\n\t// Getter Functions\n\tfunction getReputation(address userAddress, uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn reputation[userAddress][_tokenId];\n\t}\n\n\tfunction getApprovedList(address userAddress)\n\t\tpublic\n\t\tview\n\t\treturns (Approved memory)\n\t{\n\t\treturn approvedList[userAddress];\n\t}\n}\n"
    },
    "contracts/ERC4973RepFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./ERC4973Rep.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ERC4973RepFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {\n\t\tproxy = _proxy;\n\t}\n\n    function createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) external payable returns (address) {\n        require(msg.sender == proxy,\"Only Proxy Contract can call this\");\n        ERC4973Rep reputationToken = new ERC4973Rep(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId,\n\t\t\t_addIncrement,\n\t\t\t_reduceIncrement\n\t\t);\n\t\treturn address(reputationToken);\n\t}\n\n    function withdrawFees() external onlyOwner(){\n        (bool sent,) = payable(owner()).call{value: address(this).balance}(\"\");\n        require(sent,\"Error occured while transfer\");\n    }\n}\n"
    },
    "contracts/PostFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"./Interfaces/ISoulboundFactory.sol\";\nimport \"./Interfaces/IERC4973RepFactory.sol\";\nimport \"./Interfaces/IERC4973AttestFactory.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PostFactory is Ownable {\n\n\n\tstring public creator;\n\tuint256 public mintFee;\n\taddress public soulboundFactoryAddress;\n\taddress public erc4973RepFactoryAddress;\n\taddress public erc4973AttestFactoryAddress;\n\n\t// Events\n\tevent DropCreated(\n\t\tstring dropType,\n\t\taddress dropAddress\n\t);\n\n\tconstructor(string memory _creator, uint256 _mintFee) {\n\t\tcreator = _creator;\n\t\tmintFee = _mintFee;\n\t}\n\n\tfunction createSoulboundToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tISoulboundFactory soulboundFactory = ISoulboundFactory(\n\t\t\tsoulboundFactoryAddress\n\t\t);\n\t\taddress dropAddress = soulboundFactory.createDrop(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\temit DropCreated(\"Soulbound\",dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction createSoulboundReputationToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tIERC4973RepFactory erc4973RepFactory = IERC4973RepFactory(\n\t\t\terc4973RepFactoryAddress\n\t\t);\n\t\taddress dropAddress = erc4973RepFactory.createDrop(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId,\n\t\t\t_addIncrement,\n\t\t\t_reduceIncrement\n\t\t);\n\t\temit DropCreated(\"ERC4973Rep\",dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction createSoulboundAttestationToken(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {\n\t\trequire(msg.value >= mintFee, \"Value sent less than mintFee\");\n\t\tIERC4973AttestFactory erc4973AttestFactory = IERC4973AttestFactory(\n\t\t\terc4973AttestFactoryAddress\n\t\t);\n\n\t\taddress dropAddress = erc4973AttestFactory.createDeploy(\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t\tversion,\n\t\t\t_uri,\n\t\t\t_root,\n\t\t\t_mintLimit,\n\t\t\tinitialTokenId\n\t\t);\n\t\temit DropCreated(\"ERC4973Attest\", dropAddress);\n\t\treturn dropAddress;\n\t}\n\n\tfunction setMintFee(uint _mintFee) external onlyOwner() {\n\t\tmintFee = _mintFee;\n\t}\n\n    function setAddresses(address[3] memory addressList) external onlyOwner() {\n        soulboundFactoryAddress = addressList[0];\n        erc4973RepFactoryAddress = addressList[1];\n        erc4973AttestFactoryAddress = addressList[2];\n    }\n\n\tfunction withdrawFees() external onlyOwner() {\n\t\t(bool sent, ) = payable(owner()).call{ value: address(this).balance }(\"\");\n\t\trequire(sent, \"Error occured while transfer\");\n\t}\n}\n"
    },
    "contracts/Interfaces/ISoulboundFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ISoulboundFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    },
    "contracts/Interfaces/IERC4973RepFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IERC4973RepFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDrop(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId,\n\t\tuint256 _addIncrement,\n\t\tuint256 _reduceIncrement\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    },
    "contracts/Interfaces/IERC4973AttestFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IERC4973AttestFactory is Ownable {\n\taddress public proxy;\n\n\tconstructor(address _proxy) {}\n\n\tfunction createDeploy(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tstring memory version,\n\t\tstring memory _uri,\n\t\tbytes32 _root,\n\t\tuint256 _mintLimit,\n\t\tuint256 initialTokenId\n\t) external payable returns (address) {}\n\n\tfunction withdrawFees() external onlyOwner() {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}