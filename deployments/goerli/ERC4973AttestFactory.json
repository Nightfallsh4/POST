{
  "address": "0x57696A030a609918A992bc137aa872F0F741360b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_mintLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialTokenId",
          "type": "uint256"
        }
      ],
      "name": "createDeploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ddd1f0f006e186a584586ef7d7a62a7efb9bd614206e11ec9d95cca02df5b8f",
  "receipt": {
    "to": null,
    "from": "0xB721347D2938a5594a12DF5Cc36D598b839Cb98f",
    "contractAddress": "0x57696A030a609918A992bc137aa872F0F741360b",
    "transactionIndex": 43,
    "gasUsed": "4105735",
    "logsBloom": "0x00000000000000000000000000000000000000080000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000400000000000000000000000400000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000010000000000000000000000000800000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000010000",
    "blockHash": "0xa874f548e49bcd1393bfec33275fd744687fa2907f48f28b8533568a7fa29e0d",
    "transactionHash": "0x2ddd1f0f006e186a584586ef7d7a62a7efb9bd614206e11ec9d95cca02df5b8f",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 7608037,
        "transactionHash": "0x2ddd1f0f006e186a584586ef7d7a62a7efb9bd614206e11ec9d95cca02df5b8f",
        "address": "0x57696A030a609918A992bc137aa872F0F741360b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b721347d2938a5594a12df5cc36d598b839cb98f"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0xa874f548e49bcd1393bfec33275fd744687fa2907f48f28b8533568a7fa29e0d"
      }
    ],
    "blockNumber": 7608037,
    "cumulativeGasUsed": "12982737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3e646aCfDaa901239A72f86a79bf1aE93B2596ee"
  ],
  "numDeployments": 1,
  "solcInputHash": "607cbdcd84f97de7dd3ff28f40a6d48c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTokenId\",\"type\":\"uint256\"}],\"name\":\"createDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC4973AttestFactory.sol\":\"ERC4973AttestFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"contracts/ERC4973Attest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./Soulbound.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\ncontract ERC4973Attest is Soulbound {\\n\\t// State Variables\\n\\n\\tmapping(address => mapping(uint256 => address)) private tokenToAttester;\\n\\tmapping(address => mapping(uint256 => address[])) private tokenToAttestation;\\n\\n\\t// Modifiers\\n\\tmodifier isOwner(uint256 _tokenId) {\\n\\t\\trequire(ownerOf(_tokenId) == msg.sender, \\\"Only owner can request attest\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Events\\n\\tevent AttestationRequest(\\n\\t\\taddress indexed attestee,\\n\\t\\taddress indexed attester,\\n\\t\\tuint256 indexed _tokenId\\n\\t);\\n\\tevent AttestationFulfilled(\\n\\t\\taddress indexed attestee,\\n\\t\\taddress indexed attester,\\n\\t\\tuint256 indexed _tokenId\\n\\t);\\n\\tevent RequestDeleted(address indexed attestee, uint256 indexed _tokenId);\\n\\n\\t// constructor Functions\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory version,\\n\\t\\tstring memory _uri,\\n\\t\\tbytes32 _root,\\n\\t\\tuint256 _mintLimit,\\n\\t\\tuint256 initialTokenId\\n\\t)\\n\\t\\tSoulbound(_name, _symbol, version, _uri, _root, _mintLimit, initialTokenId)\\n\\t{}\\n\\n\\t// External Function\\n\\t// function mint() external {\\n\\t// \\t_mint(address(0), msg.sender, tokenId, uri);\\n\\t// \\ttokenId += 1;\\n\\t// }\\n\\n\\tfunction requestAttestation(address attesterAddress, uint256 _tokenId)\\n\\t\\texternal\\n\\t\\tisOwner(_tokenId)\\n\\t{\\n\\t\\ttokenToAttester[msg.sender][_tokenId] = attesterAddress;\\n\\t\\temit AttestationRequest(msg.sender, attesterAddress, _tokenId);\\n\\t}\\n\\n\\tfunction approveAttestation(address attesteeAddress, uint256 _tokenId)\\n\\t\\texternal\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\ttokenToAttester[attesteeAddress][_tokenId] == msg.sender,\\n\\t\\t\\t\\\"Only requested Address can attest\\\"\\n\\t\\t);\\n\\t\\ttokenToAttestation[attesteeAddress][_tokenId].push(msg.sender);\\n\\t\\temit AttestationFulfilled(attesteeAddress, msg.sender, _tokenId);\\n\\t}\\n\\n\\tfunction deleteRequest(uint256 _tokenId) external isOwner(_tokenId) {\\n\\t\\tdelete tokenToAttester[msg.sender][_tokenId];\\n\\t\\temit RequestDeleted(msg.sender, _tokenId);\\n\\t}\\n\\n\\t// Getter Functions\\n\\n\\tfunction getTokenToAttester(address userAddress, uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn tokenToAttester[userAddress][_tokenId];\\n\\t}\\n\\n\\tfunction getTokenToAttestation(address userAddress, uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (address[] memory)\\n\\t{\\n\\t\\treturn tokenToAttestation[userAddress][_tokenId];\\n\\t}\\n}\\n\",\"keccak256\":\"0x023881cf5e60613d68be4e6f421b6cd0d4a8180762fba173e8f5107b583ad93b\",\"license\":\"MIT\"},\"contracts/ERC4973AttestFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./ERC4973Attest.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ERC4973AttestFactory is Ownable {\\n\\taddress public proxy;\\n\\n\\tconstructor(address _proxy) {\\n\\t\\tproxy = _proxy;\\n\\t}\\n\\n    function createDeploy(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory version,\\n\\t\\tstring memory _uri,\\n\\t\\tbytes32 _root,\\n\\t\\tuint256 _mintLimit,\\n\\t\\tuint256 initialTokenId\\n\\t) external payable returns (address) {\\n        require(msg.sender == proxy,\\\"Only Proxy Contract can call this\\\");\\n\\t\\tERC4973Attest attestationToken = new ERC4973Attest(\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\tversion,\\n\\t\\t\\t_uri,\\n\\t\\t\\t_root,\\n\\t\\t\\t_mintLimit,\\n\\t\\t\\tinitialTokenId\\n\\t\\t);\\n\\t\\treturn address(attestationToken);\\n\\t}\\n\\n    function withdrawFees() external onlyOwner(){\\n        (bool sent,) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(sent,\\\"Error occured while transfer\\\");\\n    }\\n}\",\"keccak256\":\"0xec62214a5c2f4c910795ffba6304e839d1ae1fb4017f6409a4941d2561bbece8\",\"license\":\"MIT\"},\"contracts/Soulbound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"erc4973/src/ERC4973.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nerror TransfersNotSupportedYet();\\n\\ncontract Soulbound is ERC4973 {\\n\\t// State Varaibles\\n\\tstring public uri;\\n\\tuint256 public tokenId;\\n\\tbytes32 public root;\\n\\tuint256 public mintLimit;\\n\\tmapping(address => uint) private tokenPerAddress;\\n\\t// Constructor Function\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory version,\\n\\t\\tstring memory _uri,\\n\\t\\tbytes32 _root,\\n\\t\\tuint256 _mintLimit,\\n\\t\\tuint256 initialTokenId\\n\\t) ERC4973(_name, _symbol, version) {\\n\\t\\turi = _uri;\\n\\t\\troot = _root;\\n\\t\\tmintLimit = _mintLimit;\\n\\t\\ttokenId = initialTokenId;\\n\\t}\\n\\n\\t// External Functions\\n\\tfunction mint(bytes32[] memory proof) external {\\n\\t\\trequire(isValid(proof), \\\"Not Valid proof for Address\\\");\\n\\t\\trequire(tokenPerAddress[msg.sender]<mintLimit, \\\"Token Limit Reached\\\");\\n\\t\\ttokenPerAddress[msg.sender] += 1;\\n\\t\\ttokenId += 1;\\n\\t\\t_mint(address(0), msg.sender, tokenId, uri);\\n\\t}\\n\\n\\n\\tfunction give(\\n\\t\\taddress, /*to*/\\n\\t\\tstring calldata, /*uri*/\\n\\t\\tbytes calldata /*signature*/\\n\\t) external override returns (uint256) {\\n\\t\\t// require(msg.sender != to, \\\"give: cannot give from self\\\");\\n\\t\\t// uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);\\n\\t\\t// _mint(msg.sender, to, tokenId, uri);\\n\\t\\t// _usedHashes.set(tokenId);\\n\\t\\t// return tokenId;\\n\\t\\trevert TransfersNotSupportedYet();\\n\\t}\\n\\n\\n\\tfunction isValid(bytes32[] memory proof) internal view returns (bool){\\n\\t\\treturn MerkleProof.verify(proof, root, keccak256(abi.encodePacked(msg.sender)));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x4721e2c74f56ac7a5ac3e96da96a0eb61a9e1b3c107e38204987219cfc097b9d\",\"license\":\"MIT\"},\"erc4973/src/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n      return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x880e70e56aca6a0d34af7d731048841ae0f3483cc1c9102b04bb649c29e68bd4\",\"license\":\"MIT\"},\"erc4973/src/ERC4973.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.8;\\n\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport {ERC165} from \\\"./ERC165.sol\\\";\\n\\nimport {IERC721Metadata} from \\\"./interfaces/IERC721Metadata.sol\\\";\\nimport {IERC4973} from \\\"./interfaces/IERC4973.sol\\\";\\n\\nbytes32 constant AGREEMENT_HASH =\\n  keccak256(\\n    \\\"Agreement(address active,address passive,string tokenURI)\\\"\\n);\\n\\n/// @notice Reference implementation of EIP-4973 tokens.\\n/// @author Tim Daubensch\\u00fctz, Rahul Rumalla (https://github.com/rugpullindex/ERC4973/blob/master/src/ERC4973.sol)\\nabstract contract ERC4973 is EIP712, ERC165, IERC721Metadata, IERC4973 {\\n  using BitMaps for BitMaps.BitMap;\\n  BitMaps.BitMap private _usedHashes;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  mapping(uint256 => address) private _owners;\\n  mapping(uint256 => string) private _tokenURIs;\\n  mapping(address => uint256) private _balances;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    string memory version\\n  ) EIP712(name_, version) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC4973).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    require(_exists(tokenId), \\\"tokenURI: token doesn't exist\\\");\\n    return _tokenURIs[tokenId];\\n  }\\n\\n  function unequip(uint256 tokenId) public virtual override {\\n    require(msg.sender == ownerOf(tokenId), \\\"unequip: sender must be owner\\\");\\n    _usedHashes.unset(tokenId);\\n    _burn(tokenId);\\n  }\\n\\n  function balanceOf(address owner) public view virtual override returns (uint256) {\\n    require(owner != address(0), \\\"balanceOf: address zero is not a valid owner\\\");\\n    return _balances[owner];\\n  }\\n\\n\\n  function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n    address owner = _owners[tokenId];\\n    require(owner != address(0), \\\"ownerOf: token doesn't exist\\\");\\n    return owner;\\n  }\\n\\n  function give(\\n    address to,\\n    string calldata uri,\\n    bytes calldata signature\\n  ) external virtual returns (uint256) {\\n    require(msg.sender != to, \\\"give: cannot give from self\\\");\\n    uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);\\n    _mint(msg.sender, to, tokenId, uri);\\n    _usedHashes.set(tokenId);\\n    return tokenId;\\n  }\\n\\n  function take(\\n    address from,\\n    string calldata uri,\\n    bytes calldata signature\\n  ) external virtual returns (uint256) {\\n    require(msg.sender != from, \\\"take: cannot take from self\\\");\\n    uint256 tokenId = _safeCheckAgreement(msg.sender, from, uri, signature);\\n    _mint(from, msg.sender, tokenId, uri);\\n    _usedHashes.set(tokenId);\\n    return tokenId;\\n  }\\n\\n  function _safeCheckAgreement(\\n    address active,\\n    address passive,\\n    string calldata uri,\\n    bytes calldata signature\\n  ) internal virtual returns (uint256) {\\n    bytes32 hash = _getHash(active, passive, uri);\\n    uint256 tokenId = uint256(hash);\\n\\n    require(\\n      SignatureChecker.isValidSignatureNow(passive, hash, signature),\\n      \\\"_safeCheckAgreement: invalid signature\\\"\\n    );\\n    require(!_usedHashes.get(tokenId), \\\"_safeCheckAgreement: already used\\\");\\n    return tokenId;\\n  }\\n\\n  function _getHash(\\n    address active,\\n    address passive,\\n    string calldata uri\\n  ) internal view returns (bytes32) {\\n    bytes32 structHash = keccak256(\\n      abi.encode(\\n        AGREEMENT_HASH,\\n        active,\\n        passive,\\n        keccak256(bytes(uri))\\n      )\\n    );\\n    return _hashTypedDataV4(structHash);\\n  }\\n\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _owners[tokenId] != address(0);\\n  }\\n\\n  function _mint(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    string memory uri\\n  ) internal virtual returns (uint256) {\\n    require(!_exists(tokenId), \\\"mint: tokenID exists\\\");\\n    _balances[to] += 1;\\n    _owners[tokenId] = to;\\n    _tokenURIs[tokenId] = uri;\\n    emit Transfer(from, to, tokenId);\\n    return tokenId;\\n  }\\n\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _balances[owner] -= 1;\\n    delete _owners[tokenId];\\n    delete _tokenURIs[tokenId];\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0xa33b4eb12a67d506a53195fe2975b7c6ccc02f92b769f1ca9854945119fabcf7\",\"license\":\"CC0-1.0\"},\"erc4973/src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"erc4973/src/interfaces/IERC4973.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.6;\\n\\n/// @title Account-bound tokens\\n/// @dev See https://eips.ethereum.org/EIPS/eip-4973\\n/// Note: the ERC-165 identifier for this interface is 0x5164cf47\\ninterface IERC4973 {\\n  /// @dev This emits when ownership of any ABT changes by any mechanism.\\n  ///  This event emits when ABTs are given or equipped and unequipped\\n  ///  (`to` == 0).\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed tokenId\\n  );\\n  /// @notice Count all ABTs assigned to an owner\\n  /// @dev ABTs assigned to the zero address are considered invalid, and this\\n  ///  function throws for queries about the zero address.\\n  /// @param owner An address for whom to query the balance\\n  /// @return The number of ABTs owned by `address owner`, possibly zero\\n  function balanceOf(address owner) external view returns (uint256);\\n  /// @notice Find the address bound to an ERC4973 account-bound token\\n  /// @dev ABTs assigned to zero address are considered invalid, and queries\\n  ///  about them do throw.\\n  /// @param tokenId The identifier for an ABT.\\n  /// @return The address of the owner bound to the ABT.\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n  /// @notice Removes the `uint256 tokenId` from an account. At any time, an\\n  ///  ABT receiver must be able to disassociate themselves from an ABT\\n  ///  publicly through calling this function. After successfully executing this\\n  ///  function, given the parameters for calling `function give` or\\n  ///  `function take` a token must be re-equipable.\\n  /// @dev Must emit a `event Transfer` with the `address to` field pointing to\\n  ///  the zero address.\\n  /// @param tokenId The identifier for an ABT.\\n  function unequip(uint256 tokenId) external;\\n  /// @notice Creates and transfers the ownership of an ABT from the\\n  ///  transaction's `msg.sender` to `address to`.\\n  /// @dev Throws unless `bytes signature` represents an EIP-2089 Compact\\n  ///  Signature of the EIP-712 structured data hash\\n  ///  `Agreement(address active,address passive,string tokenURI)` expressing\\n  ///  `address to`'s explicit agreement to be publicly associated with\\n  ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\\n  ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\\n  ///  `uint256`. If `bytes signature` is empty or `address to` is a contract,\\n  ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\\n  ///  be made to `address to`. A successful execution must result in the\\n  ///  `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an\\n  ///  `uint256 tokenId` in the contract, `function give(...)` must throw.\\n  /// @param to The receiver of the ABT.\\n  /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\\n  /// @param signature A EIP-2089-compatible Compact Signature of the EIP-712\\n  ///  structured data hash\\n  ///  `Agreement(address active,address passive,string tokenURI)` signed by\\n  ///  `address to`.\\n  /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\\n  ///  EIP-712 structured data hash to a `uint256`.\\n  function give(\\n    address to,\\n    string calldata uri,\\n    bytes calldata signature\\n  ) external returns (uint256);\\n  /// @notice Creates and transfers the ownership of an ABT from an\\n  /// `address from` to the transaction's `msg.sender`.\\n  /// @dev Throws unless `bytes signature` represents an EIP-2089 Compact\\n  ///  Signature of the EIP-712 structured data hash\\n  ///  `Agreement(address active,address passive,string tokenURI)` expressing\\n  ///  `address from`'s explicit agreement to be publicly associated with\\n  ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\\n  ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\\n  ///  `uint256`. If `bytes signature` is empty or `address from` is a contract,\\n  ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\\n  ///  be made to `address from`. A successful execution must result in the\\n  ///  emission of an `event Transfer(from, msg.sender, tokenId)`. Once an ABT\\n  ///  exists as an `uint256 tokenId` in the contract, `function take(...)` must\\n  ///  throw.\\n  /// @param from The origin of the ABT.\\n  /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\\n  /// @param signature A EIP-2089-compatible Compact Signature of the EIP-712\\n  ///  structured data hash\\n  ///  `Agreement(address active,address passive,string tokenURI)` signed by\\n  ///  `address from`.\\n  /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\\n  ///  EIP-712 structured data hash to a `uint256`.\\n  function take(\\n    address from,\\n    string calldata uri,\\n    bytes calldata signature\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x85bb14e7f703579db5246d659d4504d42cc095817f8fd7f1dc01b94f196a05c2\",\"license\":\"CC0-1.0\"},\"erc4973/src/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.6;\\n\\ninterface IERC721Metadata {\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2aa0b02318514cd3117aaf66cac0b0454ece334fc8249b9a376dafb34a56b466\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004acb38038062004acb8339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b6148b480620002176000396000f3fe6080604052600436106200005c5760003560e01c8063476343ee14620000615780634d24da29146200007b578063715018a614620000b15780638da5cb5b14620000cb578063ec55688914620000fb578063f2fde38b146200012b575b600080fd5b3480156200006e57600080fd5b506200007962000159565b005b6200009960048036038101906200009391906200074b565b62000222565b604051620000a89190620008bf565b60405180910390f35b348015620000be57600080fd5b50620000c96200030f565b005b348015620000d857600080fd5b50620000e362000327565b604051620000f29190620008bf565b60405180910390f35b3480156200010857600080fd5b506200011362000350565b604051620001229190620008bf565b60405180910390f35b3480156200013857600080fd5b506200015760048036038101906200015191906200090d565b62000376565b005b6200016362000400565b60006200016f62000327565b73ffffffffffffffffffffffffffffffffffffffff1647604051620001949062000974565b60006040518083038185875af1925050503d8060008114620001d3576040519150601f19603f3d011682016040523d82523d6000602084013e620001d8565b606091505b50509050806200021f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021690620009ec565b60405180910390fd5b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ae9062000a84565b60405180910390fd5b600088888888888888604051620002ce9062000551565b620002e0979695949392919062000b40565b604051809103906000f080158015620002fd573d6000803e3d6000fd5b50905080915050979650505050505050565b6200031962000400565b62000325600062000485565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200038062000400565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003e99062000c4f565b60405180910390fd5b620003fd8162000485565b50565b6200040a62000549565b73ffffffffffffffffffffffffffffffffffffffff166200042a62000327565b73ffffffffffffffffffffffffffffffffffffffff161462000483576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200047a9062000cc1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b613b9b8062000ce483390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005c8826200057d565b810181811067ffffffffffffffff82111715620005ea57620005e96200058e565b5b80604052505050565b6000620005ff6200055f565b90506200060d8282620005bd565b919050565b600067ffffffffffffffff82111562000630576200062f6200058e565b5b6200063b826200057d565b9050602081019050919050565b82818337600083830152505050565b60006200066e620006688462000612565b620005f3565b9050828152602081018484840111156200068d576200068c62000578565b5b6200069a84828562000648565b509392505050565b600082601f830112620006ba57620006b962000573565b5b8135620006cc84826020860162000657565b91505092915050565b6000819050919050565b620006ea81620006d5565b8114620006f657600080fd5b50565b6000813590506200070a81620006df565b92915050565b6000819050919050565b620007258162000710565b81146200073157600080fd5b50565b60008135905062000745816200071a565b92915050565b600080600080600080600060e0888a0312156200076d576200076c62000569565b5b600088013567ffffffffffffffff8111156200078e576200078d6200056e565b5b6200079c8a828b01620006a2565b975050602088013567ffffffffffffffff811115620007c057620007bf6200056e565b5b620007ce8a828b01620006a2565b965050604088013567ffffffffffffffff811115620007f257620007f16200056e565b5b620008008a828b01620006a2565b955050606088013567ffffffffffffffff8111156200082457620008236200056e565b5b620008328a828b01620006a2565b9450506080620008458a828b01620006f9565b93505060a0620008588a828b0162000734565b92505060c06200086b8a828b0162000734565b91505092959891949750929550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008a7826200087a565b9050919050565b620008b9816200089a565b82525050565b6000602082019050620008d66000830184620008ae565b92915050565b620008e7816200089a565b8114620008f357600080fd5b50565b6000813590506200090781620008dc565b92915050565b60006020828403121562000926576200092562000569565b5b60006200093684828501620008f6565b91505092915050565b600081905092915050565b50565b60006200095c6000836200093f565b915062000969826200094a565b600082019050919050565b600062000981826200094d565b9150819050919050565b600082825260208201905092915050565b7f4572726f72206f636375726564207768696c65207472616e7366657200000000600082015250565b6000620009d4601c836200098b565b9150620009e1826200099c565b602082019050919050565b6000602082019050818103600083015262000a0781620009c5565b9050919050565b7f4f6e6c792050726f787920436f6e74726163742063616e2063616c6c2074686960008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600062000a6c6021836200098b565b915062000a798262000a0e565b604082019050919050565b6000602082019050818103600083015262000a9f8162000a5d565b9050919050565b600081519050919050565b60005b8381101562000ad157808201518184015260208101905062000ab4565b60008484015250505050565b600062000aea8262000aa6565b62000af681856200098b565b935062000b0881856020860162000ab1565b62000b13816200057d565b840191505092915050565b62000b2981620006d5565b82525050565b62000b3a8162000710565b82525050565b600060e082019050818103600083015262000b5c818a62000add565b9050818103602083015262000b72818962000add565b9050818103604083015262000b88818862000add565b9050818103606083015262000b9e818762000add565b905062000baf608083018662000b1e565b62000bbe60a083018562000b2f565b62000bcd60c083018462000b2f565b98975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000c376026836200098b565b915062000c448262000bd9565b604082019050919050565b6000602082019050818103600083015262000c6a8162000c28565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000ca96020836200098b565b915062000cb68262000c71565b602082019050919050565b6000602082019050818103600083015262000cdc8162000c9a565b905091905056fe6101406040523480156200001257600080fd5b5060405162003b9b38038062003b9b83398181016040528101906200003891906200039d565b86868686868686868686828160008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000ad8184846200015860201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050806101208181525050505050505082600190816200010791906200070d565b5081600290816200011991906200070d565b5050505083600690816200012e91906200070d565b508260088190555081600981905550806007819055505050505050505050505050505050620008b8565b60008383834630604051602001620001759594939291906200085b565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001fd82620001b2565b810181811067ffffffffffffffff821117156200021f576200021e620001c3565b5b80604052505050565b60006200023462000194565b9050620002428282620001f2565b919050565b600067ffffffffffffffff821115620002655762000264620001c3565b5b6200027082620001b2565b9050602081019050919050565b60005b838110156200029d57808201518184015260208101905062000280565b60008484015250505050565b6000620002c0620002ba8462000247565b62000228565b905082815260208101848484011115620002df57620002de620001ad565b5b620002ec8482856200027d565b509392505050565b600082601f8301126200030c576200030b620001a8565b5b81516200031e848260208601620002a9565b91505092915050565b6000819050919050565b6200033c8162000327565b81146200034857600080fd5b50565b6000815190506200035c8162000331565b92915050565b6000819050919050565b620003778162000362565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b600080600080600080600060e0888a031215620003bf57620003be6200019e565b5b600088015167ffffffffffffffff811115620003e057620003df620001a3565b5b620003ee8a828b01620002f4565b975050602088015167ffffffffffffffff811115620004125762000411620001a3565b5b620004208a828b01620002f4565b965050604088015167ffffffffffffffff811115620004445762000443620001a3565b5b620004528a828b01620002f4565b955050606088015167ffffffffffffffff811115620004765762000475620001a3565b5b620004848a828b01620002f4565b9450506080620004978a828b016200034b565b93505060a0620004aa8a828b0162000386565b92505060c0620004bd8a828b0162000386565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051f57607f821691505b602082108103620005355762000534620004d7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200059f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000560565b620005ab868362000560565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005ee620005e8620005e28462000362565b620005c3565b62000362565b9050919050565b6000819050919050565b6200060a83620005cd565b620006226200061982620005f5565b8484546200056d565b825550505050565b600090565b620006396200062a565b62000646818484620005ff565b505050565b5b818110156200066e57620006626000826200062f565b6001810190506200064c565b5050565b601f821115620006bd5762000687816200053b565b620006928462000550565b81016020851015620006a2578190505b620006ba620006b18562000550565b8301826200064b565b50505b505050565b600082821c905092915050565b6000620006e260001984600802620006c2565b1980831691505092915050565b6000620006fd8383620006cf565b9150826002028217905092915050565b6200071882620004cc565b67ffffffffffffffff811115620007345762000733620001c3565b5b62000740825462000506565b6200074d82828562000672565b600060209050601f83116001811462000785576000841562000770578287015190505b6200077c8582620006ef565b865550620007ec565b601f19841662000795866200053b565b60005b82811015620007bf5784890151825560018201915060208501945060208101905062000798565b86831015620007df5784890151620007db601f891682620006cf565b8355505b6001600288020188555050505b505050505050565b620007ff8162000327565b82525050565b620008108162000362565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008438262000816565b9050919050565b620008558162000836565b82525050565b600060a082019050620008726000830188620007f4565b620008816020830187620007f4565b620008906040830186620007f4565b6200089f606083018562000805565b620008ae60808301846200084a565b9695505050505050565b60805160a05160c05160e0516101005161012051613293620009086000396000611b8a01526000611bcc01526000611bab01526000611ae001526000611b3601526000611b5f01526132936000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063996517cf116100ad578063d179e3d011610071578063d179e3d014610342578063e9a21bcd1461035e578063eac989f81461037a578063ebf0c71714610398578063ec64948e146103b657610121565b8063996517cf14610278578063a394780314610296578063b77a147b146102c6578063b9297353146102e2578063c87b56dd1461031257610121565b8063192e04ce116100f4578063192e04ce146101ae5780636352211e146101ca57806370a08231146101fa57806395d89b411461022a578063995571dc1461024857610121565b806301ffc9a71461012657806306fdde031461015657806311043faa1461017457806317d70f7c14610190575b600080fd5b610140600480360381019061013b9190611e7a565b6103e6565b60405161014d9190611ec2565b60405180910390f35b61015e6104c8565b60405161016b9190611f6d565b60405180910390f35b61018e60048036038101906101899190612023565b61055a565b005b610198610748565b6040516101a59190612072565b60405180910390f35b6101c860048036038101906101c39190612023565b61074e565b005b6101e460048036038101906101df919061208d565b6108b4565b6040516101f191906120c9565b60405180910390f35b610214600480360381019061020f91906120e4565b610965565b6040516102219190612072565b60405180910390f35b610232610a1c565b60405161023f9190611f6d565b60405180910390f35b610262600480360381019061025d9190612023565b610aae565b60405161026f91906120c9565b60405180910390f35b610280610b29565b60405161028d9190612072565b60405180910390f35b6102b060048036038101906102ab91906121cc565b610b2f565b6040516102bd9190612072565b60405180910390f35b6102e060048036038101906102db91906123d5565b610c23565b005b6102fc60048036038101906102f79190612023565b610dfc565b60405161030991906124dc565b60405180910390f35b61032c6004803603810190610327919061208d565b610edb565b6040516103399190611f6d565b60405180910390f35b61035c6004803603810190610357919061208d565b610fc8565b005b6103786004803603810190610373919061208d565b61105e565b005b610382611190565b60405161038f9190611f6d565b60405180910390f35b6103a061121e565b6040516103ad919061250d565b60405180910390f35b6103d060048036038101906103cb91906121cc565b611224565b6040516103dd9190612072565b60405180910390f35b60007f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b157507f8d7bac72000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c157506104c082611258565b5b9050919050565b6060600180546104d790612557565b80601f016020809104026020016040519081016040528092919081815260200182805461050390612557565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f906125fa565b60405180910390fd5b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fdd69e4b0bee6e2a9ee1040bc725552998af99e6740ac2c303a5b1dbde655476060405160405180910390a45050565b60075481565b803373ffffffffffffffffffffffffffffffffffffffff1661076f826108b4565b73ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90612666565b60405180910390fd5b82600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f96a252b39594ae1a44111df32e5e7addd1cfb643ef0fedd12f6737afdcecb09760405160405180910390a4505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610953906126d2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90612764565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060028054610a2b90612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5790612557565b8015610aa45780601f10610a7957610100808354040283529160200191610aa4565b820191906000526020600020905b815481529060010190602001808311610a8757829003601f168201915b5050505050905090565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60095481565b60008573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b96906127d0565b60405180910390fd5b6000610baf3388888888886112c2565b9050610c0187338389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506113cc565b50610c1681600061154790919063ffffffff16565b8091505095945050505050565b610c2c81611585565b610c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c629061283c565b60405180910390fd5b600954600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce5906128a8565b60405180910390fd5b6001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d3e91906128f7565b92505081905550600160076000828254610d5891906128f7565b92505081905550610df860003360075460068054610d7590612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610da190612557565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b50505050506113cc565b5050565b6060600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ece57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e84575b5050505050905092915050565b6060610ee6826115c1565b610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c90612977565b60405180910390fd5b600460008381526020019081526020016000208054610f4390612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f90612557565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b50505050509050919050565b610fd1816108b4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906129e3565b60405180910390fd5b61105281600061162d90919063ffffffff16565b61105b8161166c565b50565b803373ffffffffffffffffffffffffffffffffffffffff1661107f826108b4565b73ffffffffffffffffffffffffffffffffffffffff16146110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90612666565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055813373ffffffffffffffffffffffffffffffffffffffff167f9ed1633f36436baeb4147d471c423aec39e94b307c4da0656df18957c4f1dfb460405160405180910390a35050565b6006805461119d90612557565b80601f01602080910402602001604051908101604052809291908181526020018280546111c990612557565b80156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b505050505081565b60085481565b60006040517feeb089b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806112d188888888611785565b905060008160001c905061132a888387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611802565b611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090612a75565b60405180910390fd5b61137d8160006119c890919063ffffffff16565b156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490612b07565b60405180910390fd5b80925050509695505050505050565b60006113d7836115c1565b15611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90612b73565b60405180910390fd5b6001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461146791906128f7565b92505081905550836003600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816004600085815260200190815260200160002090816114e09190612d3f565b50828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4829050949350505050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b60006115ba826008543360405160200161159f9190612e59565b60405160208183030381529060405280519060200120611a04565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000600882901c9050600060ff83166001901b905080198460000160008481526020019081526020016000206000828254169250508190555050505050565b6000611677826108b4565b90506001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116c99190612e74565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556004600083815260200190815260200160002060006117259190611db1565b81600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000807fe76a195fbe43f0eaa611595069f780493db2202a1cc4b2d7d44b47069812998a868686866040516117bb929190612ee7565b60405180910390206040516020016117d69493929190612f00565b6040516020818303038152906040528051906020012090506117f781611a1b565b915050949350505050565b60008060006118118585611a35565b915091506000600481111561182957611828612f45565b5b81600481111561183c5761183b612f45565b5b14801561187457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611884576001925050506119c1565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016118b9929190612fc9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611923919061302a565b600060405180830381855afa9150503d806000811461195e576040519150601f19603f3d011682016040523d82523d6000602084013e611963565b606091505b5091509150818015611976575060208151145b80156119ba5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906119b89190613056565b145b9450505050505b9392505050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b600082611a118584611a86565b1490509392505050565b6000611a2e611a28611adc565b83611bf6565b9050919050565b6000806041835103611a765760008060006020860151925060408601519150606086015160001a9050611a6a87828585611c29565b94509450505050611a7f565b60006002915091505b9250929050565b60008082905060005b8451811015611ad157611abc82868381518110611aaf57611aae613083565b5b6020026020010151611d35565b91508080611ac9906130b2565b915050611a8f565b508091505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015611b5857507f000000000000000000000000000000000000000000000000000000000000000046145b15611b85577f00000000000000000000000000000000000000000000000000000000000000009050611bf3565b611bf07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d60565b90505b90565b60008282604051602001611c0b929190613172565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611c64576000600391509150611d2c565b601b8560ff1614158015611c7c5750601c8560ff1614155b15611c8e576000600491509150611d2c565b600060018787878760405160008152602001604052604051611cb394939291906131c5565b6020604051602081039080840390855afa158015611cd5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d2357600060019250925050611d2c565b80600092509250505b94509492505050565b6000818310611d4d57611d488284611d9a565b611d58565b611d578383611d9a565b5b905092915050565b60008383834630604051602001611d7b95949392919061320a565b6040516020818303038152906040528051906020012090509392505050565b600082600052816020526040600020905092915050565b508054611dbd90612557565b6000825580601f10611dcf5750611dee565b601f016020900490600052602060002090810190611ded9190611df1565b5b50565b5b80821115611e0a576000816000905550600101611df2565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e5781611e22565b8114611e6257600080fd5b50565b600081359050611e7481611e4e565b92915050565b600060208284031215611e9057611e8f611e18565b5b6000611e9e84828501611e65565b91505092915050565b60008115159050919050565b611ebc81611ea7565b82525050565b6000602082019050611ed76000830184611eb3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f17578082015181840152602081019050611efc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f3f82611edd565b611f498185611ee8565b9350611f59818560208601611ef9565b611f6281611f23565b840191505092915050565b60006020820190508181036000830152611f878184611f34565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fba82611f8f565b9050919050565b611fca81611faf565b8114611fd557600080fd5b50565b600081359050611fe781611fc1565b92915050565b6000819050919050565b61200081611fed565b811461200b57600080fd5b50565b60008135905061201d81611ff7565b92915050565b6000806040838503121561203a57612039611e18565b5b600061204885828601611fd8565b92505060206120598582860161200e565b9150509250929050565b61206c81611fed565b82525050565b60006020820190506120876000830184612063565b92915050565b6000602082840312156120a3576120a2611e18565b5b60006120b18482850161200e565b91505092915050565b6120c381611faf565b82525050565b60006020820190506120de60008301846120ba565b92915050565b6000602082840312156120fa576120f9611e18565b5b600061210884828501611fd8565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261213657612135612111565b5b8235905067ffffffffffffffff81111561215357612152612116565b5b60208301915083600182028301111561216f5761216e61211b565b5b9250929050565b60008083601f84011261218c5761218b612111565b5b8235905067ffffffffffffffff8111156121a9576121a8612116565b5b6020830191508360018202830111156121c5576121c461211b565b5b9250929050565b6000806000806000606086880312156121e8576121e7611e18565b5b60006121f688828901611fd8565b955050602086013567ffffffffffffffff81111561221757612216611e1d565b5b61222388828901612120565b9450945050604086013567ffffffffffffffff81111561224657612245611e1d565b5b61225288828901612176565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61229982611f23565b810181811067ffffffffffffffff821117156122b8576122b7612261565b5b80604052505050565b60006122cb611e0e565b90506122d78282612290565b919050565b600067ffffffffffffffff8211156122f7576122f6612261565b5b602082029050602081019050919050565b6000819050919050565b61231b81612308565b811461232657600080fd5b50565b60008135905061233881612312565b92915050565b600061235161234c846122dc565b6122c1565b905080838252602082019050602084028301858111156123745761237361211b565b5b835b8181101561239d57806123898882612329565b845260208401935050602081019050612376565b5050509392505050565b600082601f8301126123bc576123bb612111565b5b81356123cc84826020860161233e565b91505092915050565b6000602082840312156123eb576123ea611e18565b5b600082013567ffffffffffffffff81111561240957612408611e1d565b5b612415848285016123a7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61245381611faf565b82525050565b6000612465838361244a565b60208301905092915050565b6000602082019050919050565b60006124898261241e565b6124938185612429565b935061249e8361243a565b8060005b838110156124cf5781516124b68882612459565b97506124c183612471565b9250506001810190506124a2565b5085935050505092915050565b600060208201905081810360008301526124f6818461247e565b905092915050565b61250781612308565b82525050565b600060208201905061252260008301846124fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061256f57607f821691505b60208210810361258257612581612528565b5b50919050565b7f4f6e6c792072657175657374656420416464726573732063616e20617474657360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006125e4602183611ee8565b91506125ef82612588565b604082019050919050565b60006020820190508181036000830152612613816125d7565b9050919050565b7f4f6e6c79206f776e65722063616e207265717565737420617474657374000000600082015250565b6000612650601d83611ee8565b915061265b8261261a565b602082019050919050565b6000602082019050818103600083015261267f81612643565b9050919050565b7f6f776e65724f663a20746f6b656e20646f65736e277420657869737400000000600082015250565b60006126bc601c83611ee8565b91506126c782612686565b602082019050919050565b600060208201905081810360008301526126eb816126af565b9050919050565b7f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160008201527f2076616c6964206f776e65720000000000000000000000000000000000000000602082015250565b600061274e602c83611ee8565b9150612759826126f2565b604082019050919050565b6000602082019050818103600083015261277d81612741565b9050919050565b7f74616b653a2063616e6e6f742074616b652066726f6d2073656c660000000000600082015250565b60006127ba601b83611ee8565b91506127c582612784565b602082019050919050565b600060208201905081810360008301526127e9816127ad565b9050919050565b7f4e6f742056616c69642070726f6f6620666f7220416464726573730000000000600082015250565b6000612826601b83611ee8565b9150612831826127f0565b602082019050919050565b6000602082019050818103600083015261285581612819565b9050919050565b7f546f6b656e204c696d6974205265616368656400000000000000000000000000600082015250565b6000612892601383611ee8565b915061289d8261285c565b602082019050919050565b600060208201905081810360008301526128c181612885565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290282611fed565b915061290d83611fed565b9250828201905080821115612925576129246128c8565b5b92915050565b7f746f6b656e5552493a20746f6b656e20646f65736e2774206578697374000000600082015250565b6000612961601d83611ee8565b915061296c8261292b565b602082019050919050565b6000602082019050818103600083015261299081612954565b9050919050565b7f756e65717569703a2073656e646572206d757374206265206f776e6572000000600082015250565b60006129cd601d83611ee8565b91506129d882612997565b602082019050919050565b600060208201905081810360008301526129fc816129c0565b9050919050565b7f5f73616665436865636b41677265656d656e743a20696e76616c69642073696760008201527f6e61747572650000000000000000000000000000000000000000000000000000602082015250565b6000612a5f602683611ee8565b9150612a6a82612a03565b604082019050919050565b60006020820190508181036000830152612a8e81612a52565b9050919050565b7f5f73616665436865636b41677265656d656e743a20616c72656164792075736560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612af1602183611ee8565b9150612afc82612a95565b604082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f6d696e743a20746f6b656e494420657869737473000000000000000000000000600082015250565b6000612b5d601483611ee8565b9150612b6882612b27565b602082019050919050565b60006020820190508181036000830152612b8c81612b50565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bf57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612bb8565b612bff8683612bb8565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c3c612c37612c3284611fed565b612c17565b611fed565b9050919050565b6000819050919050565b612c5683612c21565b612c6a612c6282612c43565b848454612bc5565b825550505050565b600090565b612c7f612c72565b612c8a818484612c4d565b505050565b5b81811015612cae57612ca3600082612c77565b600181019050612c90565b5050565b601f821115612cf357612cc481612b93565b612ccd84612ba8565b81016020851015612cdc578190505b612cf0612ce885612ba8565b830182612c8f565b50505b505050565b600082821c905092915050565b6000612d1660001984600802612cf8565b1980831691505092915050565b6000612d2f8383612d05565b9150826002028217905092915050565b612d4882611edd565b67ffffffffffffffff811115612d6157612d60612261565b5b612d6b8254612557565b612d76828285612cb2565b600060209050601f831160018114612da95760008415612d97578287015190505b612da18582612d23565b865550612e09565b601f198416612db786612b93565b60005b82811015612ddf57848901518255600182019150602085019450602081019050612dba565b86831015612dfc5784890151612df8601f891682612d05565b8355505b6001600288020188555050505b505050505050565b60008160601b9050919050565b6000612e2982612e11565b9050919050565b6000612e3b82612e1e565b9050919050565b612e53612e4e82611faf565b612e30565b82525050565b6000612e658284612e42565b60148201915081905092915050565b6000612e7f82611fed565b9150612e8a83611fed565b9250828203905081811115612ea257612ea16128c8565b5b92915050565b600081905092915050565b82818337600083830152505050565b6000612ece8385612ea8565b9350612edb838584612eb3565b82840190509392505050565b6000612ef4828486612ec2565b91508190509392505050565b6000608082019050612f1560008301876124fe565b612f2260208301866120ba565b612f2f60408301856120ba565b612f3c60608301846124fe565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000612f9b82612f74565b612fa58185612f7f565b9350612fb5818560208601611ef9565b612fbe81611f23565b840191505092915050565b6000604082019050612fde60008301856124fe565b8181036020830152612ff08184612f90565b90509392505050565b600061300482612f74565b61300e8185612ea8565b935061301e818560208601611ef9565b80840191505092915050565b60006130368284612ff9565b915081905092915050565b60008151905061305081612312565b92915050565b60006020828403121561306c5761306b611e18565b5b600061307a84828501613041565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006130bd82611fed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036130ef576130ee6128c8565b5b600182019050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061313b6002836130fa565b915061314682613105565b600282019050919050565b6000819050919050565b61316c61316782612308565b613151565b82525050565b600061317d8261312e565b9150613189828561315b565b602082019150613199828461315b565b6020820191508190509392505050565b600060ff82169050919050565b6131bf816131a9565b82525050565b60006080820190506131da60008301876124fe565b6131e760208301866131b6565b6131f460408301856124fe565b61320160608301846124fe565b95945050505050565b600060a08201905061321f60008301886124fe565b61322c60208301876124fe565b61323960408301866124fe565b6132466060830185612063565b61325360808301846120ba565b969550505050505056fea2646970667358221220b083a5a553dd3e21d25032455759e2350f9eb9d99a5b8c5dae08f524d08ca4eb64736f6c63430008100033a26469706673582212203ab8cc2e15eb975385cb6009e72e9dadd893ba0403d083691dbcf987bbb9225764736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106200005c5760003560e01c8063476343ee14620000615780634d24da29146200007b578063715018a614620000b15780638da5cb5b14620000cb578063ec55688914620000fb578063f2fde38b146200012b575b600080fd5b3480156200006e57600080fd5b506200007962000159565b005b6200009960048036038101906200009391906200074b565b62000222565b604051620000a89190620008bf565b60405180910390f35b348015620000be57600080fd5b50620000c96200030f565b005b348015620000d857600080fd5b50620000e362000327565b604051620000f29190620008bf565b60405180910390f35b3480156200010857600080fd5b506200011362000350565b604051620001229190620008bf565b60405180910390f35b3480156200013857600080fd5b506200015760048036038101906200015191906200090d565b62000376565b005b6200016362000400565b60006200016f62000327565b73ffffffffffffffffffffffffffffffffffffffff1647604051620001949062000974565b60006040518083038185875af1925050503d8060008114620001d3576040519150601f19603f3d011682016040523d82523d6000602084013e620001d8565b606091505b50509050806200021f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021690620009ec565b60405180910390fd5b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ae9062000a84565b60405180910390fd5b600088888888888888604051620002ce9062000551565b620002e0979695949392919062000b40565b604051809103906000f080158015620002fd573d6000803e3d6000fd5b50905080915050979650505050505050565b6200031962000400565b62000325600062000485565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200038062000400565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003e99062000c4f565b60405180910390fd5b620003fd8162000485565b50565b6200040a62000549565b73ffffffffffffffffffffffffffffffffffffffff166200042a62000327565b73ffffffffffffffffffffffffffffffffffffffff161462000483576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200047a9062000cc1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b613b9b8062000ce483390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005c8826200057d565b810181811067ffffffffffffffff82111715620005ea57620005e96200058e565b5b80604052505050565b6000620005ff6200055f565b90506200060d8282620005bd565b919050565b600067ffffffffffffffff82111562000630576200062f6200058e565b5b6200063b826200057d565b9050602081019050919050565b82818337600083830152505050565b60006200066e620006688462000612565b620005f3565b9050828152602081018484840111156200068d576200068c62000578565b5b6200069a84828562000648565b509392505050565b600082601f830112620006ba57620006b962000573565b5b8135620006cc84826020860162000657565b91505092915050565b6000819050919050565b620006ea81620006d5565b8114620006f657600080fd5b50565b6000813590506200070a81620006df565b92915050565b6000819050919050565b620007258162000710565b81146200073157600080fd5b50565b60008135905062000745816200071a565b92915050565b600080600080600080600060e0888a0312156200076d576200076c62000569565b5b600088013567ffffffffffffffff8111156200078e576200078d6200056e565b5b6200079c8a828b01620006a2565b975050602088013567ffffffffffffffff811115620007c057620007bf6200056e565b5b620007ce8a828b01620006a2565b965050604088013567ffffffffffffffff811115620007f257620007f16200056e565b5b620008008a828b01620006a2565b955050606088013567ffffffffffffffff8111156200082457620008236200056e565b5b620008328a828b01620006a2565b9450506080620008458a828b01620006f9565b93505060a0620008588a828b0162000734565b92505060c06200086b8a828b0162000734565b91505092959891949750929550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008a7826200087a565b9050919050565b620008b9816200089a565b82525050565b6000602082019050620008d66000830184620008ae565b92915050565b620008e7816200089a565b8114620008f357600080fd5b50565b6000813590506200090781620008dc565b92915050565b60006020828403121562000926576200092562000569565b5b60006200093684828501620008f6565b91505092915050565b600081905092915050565b50565b60006200095c6000836200093f565b915062000969826200094a565b600082019050919050565b600062000981826200094d565b9150819050919050565b600082825260208201905092915050565b7f4572726f72206f636375726564207768696c65207472616e7366657200000000600082015250565b6000620009d4601c836200098b565b9150620009e1826200099c565b602082019050919050565b6000602082019050818103600083015262000a0781620009c5565b9050919050565b7f4f6e6c792050726f787920436f6e74726163742063616e2063616c6c2074686960008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600062000a6c6021836200098b565b915062000a798262000a0e565b604082019050919050565b6000602082019050818103600083015262000a9f8162000a5d565b9050919050565b600081519050919050565b60005b8381101562000ad157808201518184015260208101905062000ab4565b60008484015250505050565b600062000aea8262000aa6565b62000af681856200098b565b935062000b0881856020860162000ab1565b62000b13816200057d565b840191505092915050565b62000b2981620006d5565b82525050565b62000b3a8162000710565b82525050565b600060e082019050818103600083015262000b5c818a62000add565b9050818103602083015262000b72818962000add565b9050818103604083015262000b88818862000add565b9050818103606083015262000b9e818762000add565b905062000baf608083018662000b1e565b62000bbe60a083018562000b2f565b62000bcd60c083018462000b2f565b98975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000c376026836200098b565b915062000c448262000bd9565b604082019050919050565b6000602082019050818103600083015262000c6a8162000c28565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000ca96020836200098b565b915062000cb68262000c71565b602082019050919050565b6000602082019050818103600083015262000cdc8162000c9a565b905091905056fe6101406040523480156200001257600080fd5b5060405162003b9b38038062003b9b83398181016040528101906200003891906200039d565b86868686868686868686828160008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000ad8184846200015860201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050806101208181525050505050505082600190816200010791906200070d565b5081600290816200011991906200070d565b5050505083600690816200012e91906200070d565b508260088190555081600981905550806007819055505050505050505050505050505050620008b8565b60008383834630604051602001620001759594939291906200085b565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001fd82620001b2565b810181811067ffffffffffffffff821117156200021f576200021e620001c3565b5b80604052505050565b60006200023462000194565b9050620002428282620001f2565b919050565b600067ffffffffffffffff821115620002655762000264620001c3565b5b6200027082620001b2565b9050602081019050919050565b60005b838110156200029d57808201518184015260208101905062000280565b60008484015250505050565b6000620002c0620002ba8462000247565b62000228565b905082815260208101848484011115620002df57620002de620001ad565b5b620002ec8482856200027d565b509392505050565b600082601f8301126200030c576200030b620001a8565b5b81516200031e848260208601620002a9565b91505092915050565b6000819050919050565b6200033c8162000327565b81146200034857600080fd5b50565b6000815190506200035c8162000331565b92915050565b6000819050919050565b620003778162000362565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b600080600080600080600060e0888a031215620003bf57620003be6200019e565b5b600088015167ffffffffffffffff811115620003e057620003df620001a3565b5b620003ee8a828b01620002f4565b975050602088015167ffffffffffffffff811115620004125762000411620001a3565b5b620004208a828b01620002f4565b965050604088015167ffffffffffffffff811115620004445762000443620001a3565b5b620004528a828b01620002f4565b955050606088015167ffffffffffffffff811115620004765762000475620001a3565b5b620004848a828b01620002f4565b9450506080620004978a828b016200034b565b93505060a0620004aa8a828b0162000386565b92505060c0620004bd8a828b0162000386565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051f57607f821691505b602082108103620005355762000534620004d7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200059f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000560565b620005ab868362000560565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005ee620005e8620005e28462000362565b620005c3565b62000362565b9050919050565b6000819050919050565b6200060a83620005cd565b620006226200061982620005f5565b8484546200056d565b825550505050565b600090565b620006396200062a565b62000646818484620005ff565b505050565b5b818110156200066e57620006626000826200062f565b6001810190506200064c565b5050565b601f821115620006bd5762000687816200053b565b620006928462000550565b81016020851015620006a2578190505b620006ba620006b18562000550565b8301826200064b565b50505b505050565b600082821c905092915050565b6000620006e260001984600802620006c2565b1980831691505092915050565b6000620006fd8383620006cf565b9150826002028217905092915050565b6200071882620004cc565b67ffffffffffffffff811115620007345762000733620001c3565b5b62000740825462000506565b6200074d82828562000672565b600060209050601f83116001811462000785576000841562000770578287015190505b6200077c8582620006ef565b865550620007ec565b601f19841662000795866200053b565b60005b82811015620007bf5784890151825560018201915060208501945060208101905062000798565b86831015620007df5784890151620007db601f891682620006cf565b8355505b6001600288020188555050505b505050505050565b620007ff8162000327565b82525050565b620008108162000362565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008438262000816565b9050919050565b620008558162000836565b82525050565b600060a082019050620008726000830188620007f4565b620008816020830187620007f4565b620008906040830186620007f4565b6200089f606083018562000805565b620008ae60808301846200084a565b9695505050505050565b60805160a05160c05160e0516101005161012051613293620009086000396000611b8a01526000611bcc01526000611bab01526000611ae001526000611b3601526000611b5f01526132936000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063996517cf116100ad578063d179e3d011610071578063d179e3d014610342578063e9a21bcd1461035e578063eac989f81461037a578063ebf0c71714610398578063ec64948e146103b657610121565b8063996517cf14610278578063a394780314610296578063b77a147b146102c6578063b9297353146102e2578063c87b56dd1461031257610121565b8063192e04ce116100f4578063192e04ce146101ae5780636352211e146101ca57806370a08231146101fa57806395d89b411461022a578063995571dc1461024857610121565b806301ffc9a71461012657806306fdde031461015657806311043faa1461017457806317d70f7c14610190575b600080fd5b610140600480360381019061013b9190611e7a565b6103e6565b60405161014d9190611ec2565b60405180910390f35b61015e6104c8565b60405161016b9190611f6d565b60405180910390f35b61018e60048036038101906101899190612023565b61055a565b005b610198610748565b6040516101a59190612072565b60405180910390f35b6101c860048036038101906101c39190612023565b61074e565b005b6101e460048036038101906101df919061208d565b6108b4565b6040516101f191906120c9565b60405180910390f35b610214600480360381019061020f91906120e4565b610965565b6040516102219190612072565b60405180910390f35b610232610a1c565b60405161023f9190611f6d565b60405180910390f35b610262600480360381019061025d9190612023565b610aae565b60405161026f91906120c9565b60405180910390f35b610280610b29565b60405161028d9190612072565b60405180910390f35b6102b060048036038101906102ab91906121cc565b610b2f565b6040516102bd9190612072565b60405180910390f35b6102e060048036038101906102db91906123d5565b610c23565b005b6102fc60048036038101906102f79190612023565b610dfc565b60405161030991906124dc565b60405180910390f35b61032c6004803603810190610327919061208d565b610edb565b6040516103399190611f6d565b60405180910390f35b61035c6004803603810190610357919061208d565b610fc8565b005b6103786004803603810190610373919061208d565b61105e565b005b610382611190565b60405161038f9190611f6d565b60405180910390f35b6103a061121e565b6040516103ad919061250d565b60405180910390f35b6103d060048036038101906103cb91906121cc565b611224565b6040516103dd9190612072565b60405180910390f35b60007f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b157507f8d7bac72000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c157506104c082611258565b5b9050919050565b6060600180546104d790612557565b80601f016020809104026020016040519081016040528092919081815260200182805461050390612557565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f906125fa565b60405180910390fd5b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fdd69e4b0bee6e2a9ee1040bc725552998af99e6740ac2c303a5b1dbde655476060405160405180910390a45050565b60075481565b803373ffffffffffffffffffffffffffffffffffffffff1661076f826108b4565b73ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90612666565b60405180910390fd5b82600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f96a252b39594ae1a44111df32e5e7addd1cfb643ef0fedd12f6737afdcecb09760405160405180910390a4505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610953906126d2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90612764565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060028054610a2b90612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5790612557565b8015610aa45780601f10610a7957610100808354040283529160200191610aa4565b820191906000526020600020905b815481529060010190602001808311610a8757829003601f168201915b5050505050905090565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60095481565b60008573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b96906127d0565b60405180910390fd5b6000610baf3388888888886112c2565b9050610c0187338389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506113cc565b50610c1681600061154790919063ffffffff16565b8091505095945050505050565b610c2c81611585565b610c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c629061283c565b60405180910390fd5b600954600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce5906128a8565b60405180910390fd5b6001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d3e91906128f7565b92505081905550600160076000828254610d5891906128f7565b92505081905550610df860003360075460068054610d7590612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610da190612557565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b50505050506113cc565b5050565b6060600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ece57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e84575b5050505050905092915050565b6060610ee6826115c1565b610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c90612977565b60405180910390fd5b600460008381526020019081526020016000208054610f4390612557565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f90612557565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b50505050509050919050565b610fd1816108b4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906129e3565b60405180910390fd5b61105281600061162d90919063ffffffff16565b61105b8161166c565b50565b803373ffffffffffffffffffffffffffffffffffffffff1661107f826108b4565b73ffffffffffffffffffffffffffffffffffffffff16146110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90612666565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055813373ffffffffffffffffffffffffffffffffffffffff167f9ed1633f36436baeb4147d471c423aec39e94b307c4da0656df18957c4f1dfb460405160405180910390a35050565b6006805461119d90612557565b80601f01602080910402602001604051908101604052809291908181526020018280546111c990612557565b80156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b505050505081565b60085481565b60006040517feeb089b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806112d188888888611785565b905060008160001c905061132a888387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611802565b611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090612a75565b60405180910390fd5b61137d8160006119c890919063ffffffff16565b156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490612b07565b60405180910390fd5b80925050509695505050505050565b60006113d7836115c1565b15611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90612b73565b60405180910390fd5b6001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461146791906128f7565b92505081905550836003600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816004600085815260200190815260200160002090816114e09190612d3f565b50828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4829050949350505050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b60006115ba826008543360405160200161159f9190612e59565b60405160208183030381529060405280519060200120611a04565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000600882901c9050600060ff83166001901b905080198460000160008481526020019081526020016000206000828254169250508190555050505050565b6000611677826108b4565b90506001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116c99190612e74565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556004600083815260200190815260200160002060006117259190611db1565b81600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000807fe76a195fbe43f0eaa611595069f780493db2202a1cc4b2d7d44b47069812998a868686866040516117bb929190612ee7565b60405180910390206040516020016117d69493929190612f00565b6040516020818303038152906040528051906020012090506117f781611a1b565b915050949350505050565b60008060006118118585611a35565b915091506000600481111561182957611828612f45565b5b81600481111561183c5761183b612f45565b5b14801561187457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611884576001925050506119c1565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016118b9929190612fc9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611923919061302a565b600060405180830381855afa9150503d806000811461195e576040519150601f19603f3d011682016040523d82523d6000602084013e611963565b606091505b5091509150818015611976575060208151145b80156119ba5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906119b89190613056565b145b9450505050505b9392505050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b600082611a118584611a86565b1490509392505050565b6000611a2e611a28611adc565b83611bf6565b9050919050565b6000806041835103611a765760008060006020860151925060408601519150606086015160001a9050611a6a87828585611c29565b94509450505050611a7f565b60006002915091505b9250929050565b60008082905060005b8451811015611ad157611abc82868381518110611aaf57611aae613083565b5b6020026020010151611d35565b91508080611ac9906130b2565b915050611a8f565b508091505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015611b5857507f000000000000000000000000000000000000000000000000000000000000000046145b15611b85577f00000000000000000000000000000000000000000000000000000000000000009050611bf3565b611bf07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d60565b90505b90565b60008282604051602001611c0b929190613172565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611c64576000600391509150611d2c565b601b8560ff1614158015611c7c5750601c8560ff1614155b15611c8e576000600491509150611d2c565b600060018787878760405160008152602001604052604051611cb394939291906131c5565b6020604051602081039080840390855afa158015611cd5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d2357600060019250925050611d2c565b80600092509250505b94509492505050565b6000818310611d4d57611d488284611d9a565b611d58565b611d578383611d9a565b5b905092915050565b60008383834630604051602001611d7b95949392919061320a565b6040516020818303038152906040528051906020012090509392505050565b600082600052816020526040600020905092915050565b508054611dbd90612557565b6000825580601f10611dcf5750611dee565b601f016020900490600052602060002090810190611ded9190611df1565b5b50565b5b80821115611e0a576000816000905550600101611df2565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e5781611e22565b8114611e6257600080fd5b50565b600081359050611e7481611e4e565b92915050565b600060208284031215611e9057611e8f611e18565b5b6000611e9e84828501611e65565b91505092915050565b60008115159050919050565b611ebc81611ea7565b82525050565b6000602082019050611ed76000830184611eb3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f17578082015181840152602081019050611efc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f3f82611edd565b611f498185611ee8565b9350611f59818560208601611ef9565b611f6281611f23565b840191505092915050565b60006020820190508181036000830152611f878184611f34565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fba82611f8f565b9050919050565b611fca81611faf565b8114611fd557600080fd5b50565b600081359050611fe781611fc1565b92915050565b6000819050919050565b61200081611fed565b811461200b57600080fd5b50565b60008135905061201d81611ff7565b92915050565b6000806040838503121561203a57612039611e18565b5b600061204885828601611fd8565b92505060206120598582860161200e565b9150509250929050565b61206c81611fed565b82525050565b60006020820190506120876000830184612063565b92915050565b6000602082840312156120a3576120a2611e18565b5b60006120b18482850161200e565b91505092915050565b6120c381611faf565b82525050565b60006020820190506120de60008301846120ba565b92915050565b6000602082840312156120fa576120f9611e18565b5b600061210884828501611fd8565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261213657612135612111565b5b8235905067ffffffffffffffff81111561215357612152612116565b5b60208301915083600182028301111561216f5761216e61211b565b5b9250929050565b60008083601f84011261218c5761218b612111565b5b8235905067ffffffffffffffff8111156121a9576121a8612116565b5b6020830191508360018202830111156121c5576121c461211b565b5b9250929050565b6000806000806000606086880312156121e8576121e7611e18565b5b60006121f688828901611fd8565b955050602086013567ffffffffffffffff81111561221757612216611e1d565b5b61222388828901612120565b9450945050604086013567ffffffffffffffff81111561224657612245611e1d565b5b61225288828901612176565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61229982611f23565b810181811067ffffffffffffffff821117156122b8576122b7612261565b5b80604052505050565b60006122cb611e0e565b90506122d78282612290565b919050565b600067ffffffffffffffff8211156122f7576122f6612261565b5b602082029050602081019050919050565b6000819050919050565b61231b81612308565b811461232657600080fd5b50565b60008135905061233881612312565b92915050565b600061235161234c846122dc565b6122c1565b905080838252602082019050602084028301858111156123745761237361211b565b5b835b8181101561239d57806123898882612329565b845260208401935050602081019050612376565b5050509392505050565b600082601f8301126123bc576123bb612111565b5b81356123cc84826020860161233e565b91505092915050565b6000602082840312156123eb576123ea611e18565b5b600082013567ffffffffffffffff81111561240957612408611e1d565b5b612415848285016123a7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61245381611faf565b82525050565b6000612465838361244a565b60208301905092915050565b6000602082019050919050565b60006124898261241e565b6124938185612429565b935061249e8361243a565b8060005b838110156124cf5781516124b68882612459565b97506124c183612471565b9250506001810190506124a2565b5085935050505092915050565b600060208201905081810360008301526124f6818461247e565b905092915050565b61250781612308565b82525050565b600060208201905061252260008301846124fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061256f57607f821691505b60208210810361258257612581612528565b5b50919050565b7f4f6e6c792072657175657374656420416464726573732063616e20617474657360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006125e4602183611ee8565b91506125ef82612588565b604082019050919050565b60006020820190508181036000830152612613816125d7565b9050919050565b7f4f6e6c79206f776e65722063616e207265717565737420617474657374000000600082015250565b6000612650601d83611ee8565b915061265b8261261a565b602082019050919050565b6000602082019050818103600083015261267f81612643565b9050919050565b7f6f776e65724f663a20746f6b656e20646f65736e277420657869737400000000600082015250565b60006126bc601c83611ee8565b91506126c782612686565b602082019050919050565b600060208201905081810360008301526126eb816126af565b9050919050565b7f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160008201527f2076616c6964206f776e65720000000000000000000000000000000000000000602082015250565b600061274e602c83611ee8565b9150612759826126f2565b604082019050919050565b6000602082019050818103600083015261277d81612741565b9050919050565b7f74616b653a2063616e6e6f742074616b652066726f6d2073656c660000000000600082015250565b60006127ba601b83611ee8565b91506127c582612784565b602082019050919050565b600060208201905081810360008301526127e9816127ad565b9050919050565b7f4e6f742056616c69642070726f6f6620666f7220416464726573730000000000600082015250565b6000612826601b83611ee8565b9150612831826127f0565b602082019050919050565b6000602082019050818103600083015261285581612819565b9050919050565b7f546f6b656e204c696d6974205265616368656400000000000000000000000000600082015250565b6000612892601383611ee8565b915061289d8261285c565b602082019050919050565b600060208201905081810360008301526128c181612885565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290282611fed565b915061290d83611fed565b9250828201905080821115612925576129246128c8565b5b92915050565b7f746f6b656e5552493a20746f6b656e20646f65736e2774206578697374000000600082015250565b6000612961601d83611ee8565b915061296c8261292b565b602082019050919050565b6000602082019050818103600083015261299081612954565b9050919050565b7f756e65717569703a2073656e646572206d757374206265206f776e6572000000600082015250565b60006129cd601d83611ee8565b91506129d882612997565b602082019050919050565b600060208201905081810360008301526129fc816129c0565b9050919050565b7f5f73616665436865636b41677265656d656e743a20696e76616c69642073696760008201527f6e61747572650000000000000000000000000000000000000000000000000000602082015250565b6000612a5f602683611ee8565b9150612a6a82612a03565b604082019050919050565b60006020820190508181036000830152612a8e81612a52565b9050919050565b7f5f73616665436865636b41677265656d656e743a20616c72656164792075736560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612af1602183611ee8565b9150612afc82612a95565b604082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f6d696e743a20746f6b656e494420657869737473000000000000000000000000600082015250565b6000612b5d601483611ee8565b9150612b6882612b27565b602082019050919050565b60006020820190508181036000830152612b8c81612b50565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bf57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612bb8565b612bff8683612bb8565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c3c612c37612c3284611fed565b612c17565b611fed565b9050919050565b6000819050919050565b612c5683612c21565b612c6a612c6282612c43565b848454612bc5565b825550505050565b600090565b612c7f612c72565b612c8a818484612c4d565b505050565b5b81811015612cae57612ca3600082612c77565b600181019050612c90565b5050565b601f821115612cf357612cc481612b93565b612ccd84612ba8565b81016020851015612cdc578190505b612cf0612ce885612ba8565b830182612c8f565b50505b505050565b600082821c905092915050565b6000612d1660001984600802612cf8565b1980831691505092915050565b6000612d2f8383612d05565b9150826002028217905092915050565b612d4882611edd565b67ffffffffffffffff811115612d6157612d60612261565b5b612d6b8254612557565b612d76828285612cb2565b600060209050601f831160018114612da95760008415612d97578287015190505b612da18582612d23565b865550612e09565b601f198416612db786612b93565b60005b82811015612ddf57848901518255600182019150602085019450602081019050612dba565b86831015612dfc5784890151612df8601f891682612d05565b8355505b6001600288020188555050505b505050505050565b60008160601b9050919050565b6000612e2982612e11565b9050919050565b6000612e3b82612e1e565b9050919050565b612e53612e4e82611faf565b612e30565b82525050565b6000612e658284612e42565b60148201915081905092915050565b6000612e7f82611fed565b9150612e8a83611fed565b9250828203905081811115612ea257612ea16128c8565b5b92915050565b600081905092915050565b82818337600083830152505050565b6000612ece8385612ea8565b9350612edb838584612eb3565b82840190509392505050565b6000612ef4828486612ec2565b91508190509392505050565b6000608082019050612f1560008301876124fe565b612f2260208301866120ba565b612f2f60408301856120ba565b612f3c60608301846124fe565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000612f9b82612f74565b612fa58185612f7f565b9350612fb5818560208601611ef9565b612fbe81611f23565b840191505092915050565b6000604082019050612fde60008301856124fe565b8181036020830152612ff08184612f90565b90509392505050565b600061300482612f74565b61300e8185612ea8565b935061301e818560208601611ef9565b80840191505092915050565b60006130368284612ff9565b915081905092915050565b60008151905061305081612312565b92915050565b60006020828403121561306c5761306b611e18565b5b600061307a84828501613041565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006130bd82611fed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036130ef576130ee6128c8565b5b600182019050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061313b6002836130fa565b915061314682613105565b600282019050919050565b6000819050919050565b61316c61316782612308565b613151565b82525050565b600061317d8261312e565b9150613189828561315b565b602082019150613199828461315b565b6020820191508190509392505050565b600060ff82169050919050565b6131bf816131a9565b82525050565b60006080820190506131da60008301876124fe565b6131e760208301866131b6565b6131f460408301856124fe565b61320160608301846124fe565b95945050505050565b600060a08201905061321f60008301886124fe565b61322c60208301876124fe565b61323960408301866124fe565b6132466060830185612063565b61325360808301846120ba565b969550505050505056fea2646970667358221220b083a5a553dd3e21d25032455759e2350f9eb9d99a5b8c5dae08f524d08ca4eb64736f6c63430008100033a26469706673582212203ab8cc2e15eb975385cb6009e72e9dadd893ba0403d083691dbcf987bbb9225764736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ERC4973AttestFactory.sol:ERC4973AttestFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2148,
        "contract": "contracts/ERC4973AttestFactory.sol:ERC4973AttestFactory",
        "label": "proxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}